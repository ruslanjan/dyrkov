// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using TarkovDev;
//
//    var tarkovDevResponse = TarkovDevResponse.FromJson(jsonString);

namespace TarkovDev
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TarkovDevResponse
    {
        [JsonProperty("data")]
        public Data Data { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("items")]
        public List<Item> Items { get; set; }
    }

    public partial class Item
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("shortName")]
        public string ShortName { get; set; }

        [JsonProperty("width")]
        public int width { get; set; }

        [JsonProperty("height")]
        public int height { get; set; }

        [JsonProperty("avg24hPrice")]
        public long? Avg24HPrice { get; set; }

        [JsonProperty("sellFor")]
        public List<SellFor> SellFor { get; set; } = new List<SellFor>();
    }

    public partial class SellFor
    {
        [JsonProperty("priceRUB")]
        public long PriceRub { get; set; }
    }

    public partial class TarkovDevResponse
    {
        public static TarkovDevResponse FromJson(string json) => JsonConvert.DeserializeObject<TarkovDevResponse>(json, TarkovDev.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TarkovDevResponse self) => JsonConvert.SerializeObject(self, TarkovDev.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
